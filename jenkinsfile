def version, mvnCmd = "mvn -s config/cicd-settings-nexus3.xml"
def BASE_IMAGE = 'redhat-openjdk18-openshift:latest'
def IMAGE = "uscis-egis-ms-base"
def BRANCH_NAME = 'master'
def GITURL = 'https://github.com/kopraveenc/springbootpipelinesample.git'
def SONAR = "mvn sonar:sonar \
                    -Dsonar.host.url=http://sonarqube-cicd-admin.apps.ose.hcitc-unisys.com \
                    -Dsonar.login=ecd9ce817499a04aef9c92f5dd3140dc70694414"
def OCPWH = "curl -X POST -k https://ose.hcitc-unisys.com/apis/build.openshift.io/v1/namespaces/uscis-egis-dev/buildconfigs/uscis-ms-1/webhooks/baa79dd785251177/generic"

def PROJECT = 'uscis-egis-dev'

if (BRANCH_NAME != 'master') {
  IMAGE = IMAGE + '-' + BRANCH_NAME
} else {
  ENVIRONMENT = 'Prod'
}

pipeline {
  agent { label 'maven' }
   
  stages {
   
    stage('Build App') {
            steps {
              notifyBuild("STARTED")
              git branch: BRANCH_NAME , url: GITURL
               script {
                   def pom = readMavenPom file: 'pom.xml'
                   version = pom.version
               }
              sh "${mvnCmd} install -DskipTests=true"
            }
          }
          stage('Test') {
            steps {
              sh "${mvnCmd} test"
              step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
            }
          }
          stage('Code Analysis') {
            steps {
              script {
                sh SONAR
              }
            }
          }

         stage('Build Image and Deploy to OCP') {
     
            steps {
              script {
                sh OCPWH
                    
                  }
                }
              }


  }

  post {
    success {
      notifyBuild("SUCCESSFUL")
    }
    failure {
      notifyBuild('FAILURE')
    }
  }

}
      


def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus = buildStatus ?: 'SUCCESSFUL'

  def color = 'danger'  //red
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED' || buildStatus == 'SUCCESSFUL' || buildStatus == 'SUCCESS') {
    color = 'good'
  }

  // Send notifications
  slackSend(color: color, message: summary, channel: '#cicd-notifications')
}


def sendApprovalEmail(String image, String deployment) {
 // def subject = "Jenkins job ${image} is ready for deployment to ${deployment}"
    def subject = "Jenkins job  is ready for deployment ...."

  // def body = """<p>Jenkins job <b>${image}</b> has successfully passed its quality gates and is ready for deployment to <b>${deployment}</b></p>
  //   <p><a href="${env.BUILD_URL}">View the build status</a></p>
  //   <p><a href="${env.BUILD_URL}/input">Approve or reject ${image} for automated deployment to <b>${deployment}</b></a>"""

def body = "Approval email message......"

  mail body: body, from: 'unisys.uscis-egis.jenkins@gmail.com', subject: subject, to: 'praveen.kosgi@unisys.com', charset: 'UTF-8', mimeType: 'text/html'
}


