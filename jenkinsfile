def version, mvnCmd = "mvn -s config/cicd-settings-nexus3.xml"

      pipeline 
      {
        agent {label 'maven' }
        stages {
          stage('Build App') {
            steps {
              git branch: 'master', url: 'https://github.com/kopraveenc/springbootpipelinesample.git'
            //   script {
            //       def pom = readMavenPom file: 'pom.xml'
            //       version = pom.version
            //   }
              sh "${mvnCmd} install -DskipTests=true"
            }
          }
          stage('Test') {
            steps {
              sh "${mvnCmd} test"
              step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
            }
          }
          stage('Code Analysis') {
            steps {
              script {
                sh "mvn sonar:sonar \
                    -Dsonar.host.url=http://sonarqube-cicd-admin.apps.ose.hcitc-unisys.com \
                    -Dsonar.login=ecd9ce817499a04aef9c92f5dd3140dc70694414"
              }
            }
          }

     
        stage('Build Docker Image') {
            steps {
              script {
                        
                        checkout scm
                        def dockerfile = 'Dockerfile'
                        def sbimagex= docker.build("sbimagex:${env.BUILD_ID}", "-f ${dockerfile} .") 
                        docker.withRegistry('https://registry.example.com', 'credentials-id') 
                        {
                            def sbimagey = docker.build("sbimagex:${env.BUILD_ID}")
                            /* Push the container to the custom Registry */
                            sbimagey.push()
                        }


                      }
                    }
           }
    





        


        }
      }


          /*
          stage('Archive App') {
            steps {
              sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
            }
          }*/

      //     stage('Create Image Builder') {

      //       when {
      //         expression {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               return !openshift.selector("dc", "uscis-egis-dev").exists();
      //             }
      //           }
      //         }
      //       }
      //       steps {
      //         script {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               openshift.newBuild("--name=uscis-egis-dev", "--image-stream=redhat-openjdk18-openshift:1.3", "--binary=true")
      //             }
      //           }
      //         }
      //       }
      //     }
      //     stage('Build Image') {
      //       steps {
      //         sh "rm -rf ocp && mkdir -p ocp/deployments"
      //         sh "pwd && ls -la target "
      //         sh "cp target/*.jar ocp/deployments"

      //         script {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               openshift.selector("dc", "uscis-egis-dev").startBuild("--from-dir=./ocp","--follow", "--wait=true")
      //             }
      //           }
      //         }
      //       }
      //     }
      //     stage('Create DEV') {
      //       when {
      //         expression {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               return !openshift.selector('dc', 'uscis-egis-dev').exists()
      //             }
      //           }
      //         }
      //       }
      //       steps {
      //         script {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               def app = openshift.newApp("uscis-egis-dev-sb:latest")
      //               app.narrow("svc").expose();

      //               //http://localhost:8080/actuator/health
      //               openshift.set("probe dc/uscis-egis-dev --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
      //               openshift.set("probe dc/uscis-egis-dev --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")

      //               def dc = openshift.selector("dc", "uscis-egis-dev")
      //               while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
      //                   sleep 10
      //               }
      //               openshift.set("triggers", "dc/uscis-egis-dev", "--manual")
      //             }
      //           }
      //         }
      //       }
      //     }
      //     stage('Deploy DEV') {
      //       steps {
      //         script {
      //           openshift.withCluster() {
      //             openshift.withProject(env.DEV_PROJECT) {
      //               openshift.selector("dc", "uscis-egis-dev").rollout().latest();
      //             }
      //           }
      //         }
      //       }
      //     }
      //     stage('Promote to STAGE?') {
      //       steps {
      //         script {
      //           openshift.withCluster() {
      //             openshift.tag("${env.DEV_PROJECT}/uscis-egis-dev:latest", "${env.STAGE_PROJECT}/uscis-egis-dev:${version}")
      //           }
      //         }
      //       }
      //     }
      //     stage('Deploy STAGE') {
      //       steps {
      //         script {
      //           openshift.withCluster() {
      //             openshift.withProject(env.STAGE_PROJECT) {
      //               if (openshift.selector('dc', 'uscis-egis-stage').exists()) {
      //                 openshift.selector('dc', 'uscis-egis-stage').delete()
      //                 openshift.selector('svc', 'uscis-egis-stage').delete()
      //                 openshift.selector('route', 'uscis-egis-stage').delete()
      //               }

      //               openshift.newApp("uscis-egis-stage:${version}").narrow("svc").expose()
      //               openshift.set("probe dc/uscis-egis-stage --readiness --get-url=http://:8080/actuator/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
      //               openshift.set("probe dc/uscis-egis-stage --liveness  --get-url=http://:8080/actuator/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
      //             }
      //           }
      //         }
      //       }
      //     }
      //   }
      // }
